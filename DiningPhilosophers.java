//following code generated by microsoft copliot

import java.util.concurrent.Semaphore;

public class DiningPhilosophers {
    private static final int NUM_PHILOSOPHERS = 5;
    private static final Semaphore[] forks = new Semaphore[NUM_PHILOSOPHERS];

    public static void main(String[] args) {
        for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
            forks[i] = new Semaphore(1); // Initialize each fork
        }

        for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
            Thread philosopher = new Thread(new Philosopher(i));
            philosopher.start();
        }
    }

    static class Philosopher implements Runnable {
        private final int id;

        public Philosopher(int id) {
            this.id = id;
        }

        private void think() throws InterruptedException {
            System.out.println("Philosopher " + id + " is thinking.");
            Thread.sleep((int) (Math.random() * 100));
        }

        private void eat() throws InterruptedException {
            System.out.println("Philosopher " + id + " is eating.");
            Thread.sleep((int) (Math.random() * 100));
        }

        @Override
        public void run() {
            try {
                while (true) {
                    think();
                    forks[id].acquire(); // Pick up left fork
                    forks[(id + 1) % NUM_PHILOSOPHERS].acquire(); // Pick up right fork
                    eat();
                    forks[id].release(); // Put down left fork
                    forks[(id + 1) % NUM_PHILOSOPHERS].release(); // Put down right fork
                }
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }
    }
}
